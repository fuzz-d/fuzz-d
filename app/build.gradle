/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id 'org.jetbrains.kotlin.jvm' version "1.8.10"

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'antlr'
    id 'jacoco'
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(19))
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

def KOTLIN_VERSION = "1.8.10"

dependencies {
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation "org.jetbrains.kotlin:kotlin-reflect:${KOTLIN_VERSION}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${KOTLIN_VERSION}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-cli:0.3.5"

    antlr "org.antlr:antlr4:4.12.0"

    testImplementation "org.jetbrains.kotlin:kotlin-test:${KOTLIN_VERSION}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.9.2"
    testImplementation "io.mockk:mockk:1.13.4"
}

application {
    // Define the main class for the application.
    mainClass = 'fuzzd.MainKt'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes['Main-Class'] = 'fuzzd.MainKt'
    }

    dependsOn(configurations.runtimeClasspath)
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

generateGrammarSource {
    arguments += ['-no-listener', '-visitor']
}

compileKotlin {
    dependsOn generateGrammarSource
}

compileTestKotlin {
    dependsOn generateTestGrammarSource
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports')
    }
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory.set(layout.buildDirectory.dir('reports'))
}

